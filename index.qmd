---
title: MCP 101
subtitle: Building the Next Generation of Context-Aware AI Agents
author: Skylar Payne
format: revealjs
---

## The Dawn of Agentic AI {.center}
::: {.fragment}
**From text generation to real-world action**
:::

::: {.fragment}
```{mermaid}
graph TB
    A["üß† Traditional LLM<br/>Text Generator"] 
    B["ü§ñ Agentic AI<br/>Action Taker"]
    
    A --> C["üìù Email Drafts"]
    A --> D["üí≠ Ideas"]
    
    B --> E["üîç Research"]
    B --> F["‚öôÔ∏è Tool Use"]
    B --> G["üéØ Goal Achievement"]
    
    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#9f9,stroke:#333,stroke-width:2px
```
:::

::: {.columns}

<!--
FIXME: These examples I'm not sure are real... They sound hallucinated.
-->
::: {.column width="50%" .fragment}
- ü§ñ AI agents can now reason, plan, and use tools
- üî¨ Microsoft Discovery: AI-discovered sustainable cooling material
:::

::: {.column width="50%" .fragment}
- üìä Autonomous competitive analysis in under 50 minutes
- üé• HeyGen Video Agent: prompt-to-video generation
:::

<!--
FIXME: This flows off the page.
-->
::: {.fragment}
**The paradigm shift:** Passive content creation ‚Üí Active problem-solving
:::

:::

## {.center}

## The Context Gap Problem {.center}

::: {.fragment}
**LLMs are "incredibly smart in a vacuum"** üéà
:::

<!--
FIXME: This slide feels cluttered. Needs more white space to make it more readable.
Both between the columns and between the bullet points
-->
::: {.columns}

::: {.column width="50%"}
### üöß The Challenges
- **‚è≥ Knowledge Cutoff**: Frozen training data
- **üèùÔ∏è Data Silos**: No access to private/real-time data  
- **üï∏Ô∏è N√óM Integration**: Every model needs custom connections
:::

<!--
FIXME: the 80% stat seems hallucinated.
-->
::: {.column width="50%"}
### üí• The Impact
- üìâ 80% of AI projects fail due to data access
- üß© Complex "context engineering" required
- üîí Vendor lock-in and brittle integrations
:::

:::

## {.center}

## Integration: Before vs After MCP

| Aspect | Traditional (N√óM) | MCP Standard |
|--------|------------------|--------------|
| **Integration Effort** | High: Custom code for each pair | Low: One server, any client |
| **Discoverability** | Manual documentation reading | Automated runtime reflection |
| **Interoperability** | Vendor-locked | Model-agnostic open standard |
| **Security** | Ad-hoc API key management | OAuth 2.1, scopes, consent |
| **Scalability** | Poor: N√óM complexity | Excellent: N+M complexity |

<!--
FIXME: this slide feels unnecessary honestly. Can possibly be removed.
Maybe just add "MCP: The USB C for AI" to the previous slide above the table?
-->
## Meet MCP: The Universal Standard {.center}

::: {.fragment}
**Model Context Protocol** - *Anthropic, November 2024*
:::

::: {.columns}

::: {.column width="50%"}
### Key Analogies
- **"USB-C for AI"**: Universal connector for AI peripherals
- **"LSP for AI"**: Like Language Server Protocol for editors
:::

::: {.column width="50%"}
### Core Benefits
- Open, model-agnostic standard
- Network effects: build once, use everywhere
- Future-proof architecture
:::

:::

## {.center}

## MCP Architecture {.center}

```{mermaid}
graph TD
    A[MCP Host<br/>Claude Desktop, Cursor IDE] --> B[MCP Client 1]
    A --> C[MCP Client 2]
    A --> D[MCP Client N]
    B --> E[ArXiv Server]
    C --> F[GitHub Server]
    D --> G[Database Server]
    
    style A fill:#e1f5fe
    style E fill:#f3e5f5
    style F fill:#f3e5f5
    style G fill:#f3e5f5
```

- **Host**: User-facing application
- **Client**: Manages connections (1:1 with servers)
- **Server**: Exposes specific capabilities via JSON-RPC 2.0

## Our Demo: AI Research Assistant {.center}

::: {.fragment}
**Goal**: Build an agent that finds, analyzes, and manages academic papers
:::

::: {.fragment}
### Implementation Plan
1. **Scaffold**: Basic ArXiv search server
2. **Expand**: Add Tools, Resources, and Prompts
3. **Enhance**: Progress notifications and logging
4. **Secure**: OAuth authentication with Zotero
5. **Advanced**: Elicitation, Roots, and Sampling
:::

## {.center}

<!--
FIXME: we should have a placeholder here for a live demo of the system before we get into showing how it is built.
-->

## Step 1: Scaffolding the ArXiv Server

::: {.columns}

::: {.column width="40%"}
### Setup
```bash
uv sync
```
:::

::: {.column width="60%"}
### Simple Server
```python
from mcp.server.fastmcp import FastMCP
import arxiv

mcp = FastMCP("ArXiv Research Server")

@mcp.tool()
def search_papers(query: str, max_results: int = 5):
    """Search ArXiv for scientific papers"""
    pass
```
:::

:::

::: {.fragment}
**Run and test**: `uv run uvicorn server:mcp --reload`
:::

## {.center}

## MCP's Three Core Primitives {.center}

| Primitive | Purpose | Analogy | Example |
|-----------|---------|---------|---------|
| **Tools** | Executable actions with side effects | POST Request | `download_paper(paper_id)` |
| **Resources** | Read-only, file-like data | GET Request | `arxiv/{paper_id}/abstract` |
| **Prompts** | Reusable workflow templates | Workflow | "Deep Paper Analysis" |

::: {.fragment}
**Benefits**: Clear separation of concerns, better security, predictable behavior
:::

## {.center}

## Code Demo: Complete ArXiv Server

::: {.columns}

<!--
FIXME: split these two code blocks into two separate slides.
-->
::: {.column width="50%"}
**Setup & Models**
```python
from mcp.server.fastmcp import FastMCP
import arxiv
from pydantic import BaseModel

mcp = FastMCP("ArXiv Research Server")

class Paper(BaseModel):
    title: str
    authors: list[str]
    summary: str
    pdf_url: str
```
:::

::: {.column width="50%"}
**Tools & Resources**
```python
@mcp.tool()
def search_papers(query: str, max_results: int = 5):
    """Search ArXiv for papers"""
    search = arxiv.Search(query=query, 
                         max_results=max_results)
    return [Paper(...) for r in search.results()]

@mcp.resource("arxiv/{paper_id}/abstract")
def get_abstract(paper_id: str) -> str:
    """Get paper abstract"""
    # Implementation here
    pass
```
:::

:::

::: {.fragment}
**Full implementation**: See `examples/arxiv-server/server.py`
:::

## {.center}

<!--
FIXME: there's too much text on this slide to see the code. Better to just show the code with minimal setup
But still keep SOME intro text.
-->
## Enhanced UX: Progress Tracking

::: {.columns}

::: {.column width="50%"}
### The Problem
- Long-running operations leave users waiting
- No feedback during downloads or processing
- Poor user experience
:::

::: {.column width="50%"}
### MCP Solution
- Built-in notification system
- Progress tokens for tracking
- Real-time status updates
:::

:::

### Implementation
```json
{
  "method": "notifications/progress",
  "params": {
    "progressToken": "download-xyz-789",
    "progress": 5,
    "total": 20,
    "message": "Downloading paper 5 of 20..."
  }
}
```
<!--
FIXME: I doubt the correctness/authenticity of this slide.
-->
## Security: OAuth 2.1 Authentication

::: {.fragment}
**Challenge**: Access private Zotero library safely
:::

::: {.columns}

::: {.column width="50%"}
### Traditional OAuth Pain
- Manual app registration
- Copy-paste client credentials
- N√óM authentication problem
:::

::: {.column width="50%"}
### MCP Innovation
- **Dynamic Client Registration**
- Automatic endpoint discovery
- One-click user consent
- PKCE security protection
:::

:::

::: {.fragment}
**Result**: Most secure path is also the easiest path
:::

## {.center}

## Authentication Flow

```{mermaid}
sequenceDiagram
    participant User
    participant Client
    participant Server
    participant Zotero
    
    User->>Client: "Save paper to Zotero"
    Client->>Server: add_paper_to_collection()
    Server-->>Client: 401 Unauthorized
    Client->>Zotero: OAuth authorization request
    Zotero->>User: Login & consent screen
    User->>Zotero: Approve access
    Zotero->>Client: Authorization code
    Client->>Zotero: Exchange for access token
    Client->>Server: Retry with Bearer token
    Server->>Client: Success!
```

<!--
FIXME: we need a code example to actually connect with Zotero...
-->

<!--
FIXME: I think it would be nice to use cards here with better margins/padding to create space in the content
-->
## Advanced Interactive Patterns

::: {.columns}

::: {.column width="50%"}
### üó£Ô∏è Elicitation
Ask users for clarification when needed

**Example**: "Which 'transformers'?" 
- AI models or electrical engineering?
:::

::: {.column width="50%"}
### üîí Security Features
- **Roots**: Filesystem boundaries
- **Sampling**: Server can request LLM help
- **Scopes**: Granular permissions
:::

:::

::: {.fragment}
**Key benefit**: Human-in-the-loop workflows with graceful ambiguity handling
:::

## {.center}

## The Growing MCP Ecosystem

::: {.columns}

::: {.column width="50%"}
### üõ†Ô∏è Popular Categories
- **Developer Tools**: GitHub, GitLab, Docker
- **Databases**: PostgreSQL, Redis, Vector DBs  
- **Communication**: Slack, Gmail, Teams
:::

::: {.column width="50%"}
### üöÄ What They Enable
- **Productivity**: Google Drive, Notion, Zotero
- **Web Search**: Brave, DuckDuckGo, Tavily
- **Aggregators**: Zapier (1000s of integrations)
:::

:::

::: {.fragment}
**200+ servers and growing** - Build once, use everywhere
:::

## {.center}

## Getting Started: Developer Resources

::: {.columns}

<!--
FIXME: these need actual links.
-->
::: {.column width="50%"}
### Essential Resources
- **Official Docs**: modelcontextprotocol.io
- **Protocol Spec**: Complete technical specification
- **SDKs**: Python, TypeScript, Java, C#, Go
- **MCP Inspector**: Interactive debugging tool
:::

::: {.column width="50%"}
### Learning & Community
- **DeepLearning.AI Course**: Structured tutorials
- **awesome-mcp-servers**: Curated examples
- **Community**: Reddit r/mcp, Discord servers
- **Quick Start**: Build your first server in minutes
:::

:::

## {.center}

<!--
FIXME: I pointed out somewhere above we should start with a live demo of the system before we get into showing how it is built; so this should be moved there.
-->
## Demo Time! {.center}

::: {.fragment}
**Let's see our AI Research Assistant in action**
:::

::: {.fragment}
1. Search for papers on "transformer models"
2. Download a specific paper
3. Save it to Zotero library
4. Generate a summary with progress tracking
:::

## {.center}

## The Future is Composable {.center}

::: {.fragment}
**MCP resolves the critical context gap**
:::

::: {.fragment}
- **Universal language** for AI integration
- **Composable agents** working in concert
- **Network effects** drive rapid ecosystem growth
:::

::: {.fragment}
### Your Next Steps
1. **Identify** a tool you use daily
2. **Build** a simple MCP server for it
3. **Contribute** to the growing ecosystem
4. **Unlock** its potential for all AI applications
:::

::: {.fragment}
**The time to start building is now.**
:::

## {.center}

## Questions & Discussion {.center}

::: {.fragment}
**Thank you!**
:::

::: {.fragment}
### Resources
- **Demo Code**: Available in this repository
- **Documentation**: modelcontextprotocol.io
- **Community**: Join the MCP ecosystem
:::

::: {.fragment}
*Let's build the future of AI together.*
:::