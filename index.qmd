---
title: MCP 101
subtitle: Building the Next Generation of Context-Aware AI Agents
author: Skylar Payne
format: revealjs
---

## The Dawn of Agentic AI {.center}
::: {.fragment}
**From text generation to real-world action**
:::

::: {.fragment}
```{mermaid}
graph TB
    A["🧠 Traditional LLM<br/>Text Generator"] 
    B["🤖 Agentic AI<br/>Action Taker"]
    
    A --> C["📝 Email Drafts"]
    A --> D["💭 Ideas"]
    
    B --> E["🔍 Research"]
    B --> F["⚙️ Tool Use"]
    B --> G["🎯 Goal Achievement"]
    
    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#9f9,stroke:#333,stroke-width:2px
```
:::

::: {.fragment}
**The paradigm shift:**  
Passive content creation → Active problem-solving
:::

## The Context Gap Problem {.center}

::: {.fragment}
**LLMs are "incredibly smart in a vacuum"** 🎈
:::

::: {.columns}

::: {.column width="45%"}
### 🚧 The Challenges

- **⏳ Knowledge Cutoff**: Frozen training data  
- **🏝️ Data Silos**: No access to private/real-time data  
- **🕸️ N×M Integration**: Every model needs custom connections  
:::

::: {.column width="45%" .mb-4}
### 💥 The Impact

- 📉 80% of AI projects fail (RAND Corp, 2024)  
- 🧩 Complex "context engineering" required  
- 🔒 Vendor lock-in and brittle integrations  
:::

:::

## MCP: The USB-C for AI {.center}

| Aspect | Traditional (N×M) | MCP Standard |
|--------|------------------|--------------|
| **Integration Effort** | High: Custom code for each pair | Low: One server, any client |
| **Discoverability** | Manual documentation reading | Automated runtime reflection |
| **Interoperability** | Vendor-locked | Model-agnostic open standard |
| **Security** | Ad-hoc API key management | OAuth 2.1, scopes, consent |
| **Scalability** | Poor: N×M complexity | Excellent: N+M complexity |

## MCP Architecture {.center}

```{mermaid}
graph TD
    A[MCP Host<br/>Claude Desktop, Cursor IDE] --> B[MCP Client 1]
    A --> C[MCP Client 2]
    A --> D[MCP Client N]
    B --> E[OAuth Research Server]
    C --> F[GitHub Server]
    D --> G[Database Server]
    
    style A fill:#e1f5fe
    style E fill:#f3e5f5
    style F fill:#f3e5f5
    style G fill:#f3e5f5
```

- **Host**: User-facing application
- **Client**: Manages connections (1:1 with servers)
- **Server**: Exposes specific capabilities via JSON-RPC 2.0

## Our Demo: AI Research Assistant {.center}

::: {.fragment}
**Goal**: Build an agent that finds, analyzes, and manages academic papers
:::

::: {.fragment}
### Implementation Plan
:::

::: {.incremental}
1. **Scaffold**: Basic OAuth server with GitHub integration
2. **Expand**: Add Tools, Resources, and Prompts
3. **Enhance**: OAuth 2.1 + PKCE authentication
4. **Secure**: Protected tools requiring GitHub OAuth
5. **Advanced**: Token management and dynamic client registration
:::

## Demo Time! {.center}

::: {.fragment}
**Let's see our OAuth Research Assistant in action**
:::

::: {.fragment}
1. Register OAuth client with MCP server
2. Authenticate with GitHub via OAuth 2.1 + PKCE
3. Save research papers to GitHub repositories
4. List and manage research repositories
:::

## Step 1: OAuth Research Server Setup

::: {.columns}

::: {.column width="40%"}
### Setup
```bash
# Set GitHub OAuth credentials
export GITHUB_CLIENT_ID="your_id"
export GITHUB_CLIENT_SECRET="your_secret"

# Install dependencies
pip install -r requirements.txt
```
:::

::: {.column width="60%"}
### OAuth Server
```python
from fastapi import HTTPException
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("OAuth Research Server")

@mcp.get("/.well-known/oauth-authorization-server")
async def oauth_metadata():
    return {
        "authorization_endpoint": "http://localhost:8002/oauth/authorize",
        "token_endpoint": "http://localhost:8002/oauth/token"
    }

@mcp.tool()
async def save_paper_to_github(paper_title: str, repo_name: str):
    """Save research paper to GitHub (OAuth required)"""
    auth_context = get_auth_context()
    if not auth_context.get("bearer"):
        raise HTTPException(status_code=401, detail="OAuth required")
    
    # Create GitHub repository with OAuth token
    return {"status": "saved", "repo_url": f"https://github.com/user/{repo_name}"}

mcp.run(transport="http", port=8002)
```
:::

:::

::: {.fragment}
**Run and test**: `python oauth_server.py`
:::

## OAuth 2.1 Flow Implementation

```{mermaid}
sequenceDiagram
    participant Client as MCP Client
    participant Server as OAuth Server
    participant GitHub as GitHub OAuth
    participant API as GitHub API

    Client->>Server: 1. Register Client (Dynamic)
    Server-->>Client: Client ID & Secret
    
    Client->>Server: 2. Request Authorization
    Server->>GitHub: 3. Redirect to GitHub OAuth
    GitHub->>Server: 4. Authorization Code
    Server->>GitHub: 5. Exchange Code for Token
    GitHub-->>Server: GitHub Access Token
    Server-->>Client: 6. MCP Access Token
    
    Client->>Server: 7. Call Protected Tool
    Note over Server: Bearer Token Required
    Server->>API: 8. GitHub API Call
    API-->>Server: Repository Created
    Server-->>Client: Success Response
```

## MCP's Three Core Primitives {.center}

| Primitive | Purpose | Analogy | Example |
|-----------|---------|---------|---------|
| **Tools** | Executable actions with side effects | POST Request | `save_paper_to_github(title, repo_name)` |
| **Resources** | Read-only, file-like data | GET Request | `github/repos/{repo_name}/readme` |
| **Prompts** | Reusable workflow templates | Workflow | "OAuth Paper Management" |

::: {.fragment}
**Benefits**: Clear separation of concerns, better security, predictable behavior
:::

## Code Demo: Setup & Models

```python
from mcp.server.fastmcp import FastMCP
from fastapi import HTTPException
import httpx
from pydantic import BaseModel

mcp = FastMCP("OAuth Research Server")

class GitHubRepository(BaseModel):
    name: str
    full_name: str
    description: str
    html_url: str
    created_at: str
```

## Code Demo: Tools Implementation

```python
@mcp.tool()
async def save_paper_to_github(paper_title: str, repo_name: str):
    """Save research paper to GitHub (OAuth required)"""
    auth_context = get_auth_context()
    if not auth_context.get("bearer"):
        raise HTTPException(status_code=401, detail="OAuth required")
    
    # Use GitHub API with OAuth token
    token_info = access_tokens[auth_context["bearer"]]
    github_token = token_info["github_token"]
    
    # Create repository via GitHub API
    return {"status": "saved", "repo_url": f"https://github.com/user/{repo_name}"}
```

## Code Demo: Resources Implementation

```python
@mcp.resource("github/repos/{repo_name}/readme")
async def get_repo_readme(repo_name: str) -> str:
    """Get repository README (OAuth required)"""
    auth_context = get_auth_context()
    if not auth_context.get("bearer"):
        raise HTTPException(status_code=401, detail="OAuth required")
    
    # Fetch README from GitHub API
    github_token = access_tokens[auth_context["bearer"]]["github_token"]
    
    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"https://api.github.com/repos/{repo_name}/readme",
            headers={"Authorization": f"Bearer {github_token}"}
        )
        return response.json()["content"]
```

::: {.fragment}
**Full implementation**: See `examples/oauth-research-server/oauth_server.py`
:::

## Enhanced UX: Progress Tracking

**Problem**: Long-running operations need user feedback

**Solution**: MCP's built-in notification system

```python
@mcp.tool()
def download_papers(paper_ids: list[str], progress_token: str):
    """Download multiple papers with progress tracking"""
    total = len(paper_ids)
    
    for i, paper_id in enumerate(paper_ids):
        # Send progress notification
        mcp.request_context.session.send_progress_notification(
            progress_token=progress_token,
            progress=i + 1,
            total=total,
            message=f"Downloading paper {i + 1} of {total}..."
        )
        
        # Download paper
        download_single_paper(paper_id)
```
## Security: OAuth 2.1 Authentication

::: {.fragment}
**Challenge**: Access private Zotero library safely
:::

::: {.columns}

::: {.column width="50%"}
### Traditional OAuth Pain
- Manual app registration
- Copy-paste client credentials
- N×M authentication problem
:::

::: {.column width="50%"}
### MCP Innovation
- **Dynamic Client Registration**
- Automatic endpoint discovery
- One-click user consent
- PKCE security protection
:::

:::

::: {.fragment}
**Result**: Most secure path is also the easiest path
:::

## Authentication Flow

```{mermaid}
sequenceDiagram
    participant User
    participant Client
    participant Server
    participant Zotero
    
    User->>Client: "Save paper to Zotero"
    Client->>Server: add_paper_to_collection()
    Server-->>Client: 401 Unauthorized
    Client->>Zotero: OAuth authorization request
    Zotero->>User: Login & consent screen
    User->>Zotero: Approve access
    Zotero->>Client: Authorization code
    Client->>Zotero: Exchange for access token
    Client->>Server: Retry with Bearer token
    Server->>Client: Success!
```

## Zotero Integration Code Example

```python
from pyzotero import zotero

@mcp.tool()
def add_paper_to_zotero(paper_id: str, collection_key: str = None):
    """Add ArXiv paper to Zotero library"""
    # Get paper details from ArXiv
    paper = arxiv.Search(id_list=[paper_id]).results()[0]
    
    # Initialize Zotero client (requires OAuth token)
    zot = zotero.Zotero(
        library_id=user_library_id,
        library_type='user', 
        api_key=oauth_token
    )
    
    # Create Zotero item
    item = {
        'itemType': 'preprint',
        'title': paper.title,
        'creators': [{'name': str(author), 'creatorType': 'author'} 
                    for author in paper.authors],
        'abstractNote': paper.summary,
        'url': paper.entry_id,
        'repository': 'arXiv'
    }
    
    # Add to Zotero
    return zot.create_items([item])
```

## Advanced Interactive Patterns

::: {.columns}

::: {.column width="50%"}
::: {style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;"}
### 🗣️ Elicitation

Ask users for clarification when needed

**Example**: "Which 'transformers'?"  
- AI models or electrical engineering?
:::
:::

::: {.column width="50%"}
::: {style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;"}
### 🔒 Security Features

- **Roots**: Filesystem boundaries  
- **Sampling**: Server can request LLM help  
- **Scopes**: Granular permissions
:::
:::

:::

::: {.fragment}
**Key benefit**: Human-in-the-loop workflows with graceful ambiguity handling
:::

## The Growing MCP Ecosystem

::: {.columns}

::: {.column width="50%"}
### 🛠️ Popular Categories
- **Developer Tools**: GitHub, GitLab, Docker
- **Databases**: PostgreSQL, Redis, Vector DBs  
- **Communication**: Slack, Gmail, Teams
:::

::: {.column width="50%"}
### 🚀 What They Enable
- **Productivity**: Google Drive, Notion, Zotero
- **Web Search**: Brave, DuckDuckGo, Tavily
- **Aggregators**: Zapier (1000s of integrations)
:::

:::

::: {.fragment}
**200+ servers and growing** - Build once, use everywhere
:::

## Getting Started: Developer Resources

::: {.columns}

::: {.column width="50%"}
### Essential Resources
- **Official Docs**: [modelcontextprotocol.io](https://modelcontextprotocol.io)
- **Protocol Spec**: Complete technical specification
- **SDKs**: Python, TypeScript, Java, C#, Go
- **MCP Inspector**: Interactive debugging tool
:::

::: {.column width="50%"}
### Learning & Community
- **DeepLearning.AI Course**: [Build Rich-Context AI Apps](https://www.deeplearning.ai/short-courses/mcp-build-rich-context-ai-apps-with-anthropic/)
- **awesome-mcp-servers**: [GitHub Collection](https://github.com/punkpeye/awesome-mcp-servers)
- **Community**: [MCP Servers Directory](https://mcpservers.org)
- **Quick Start**: Build your first server in minutes
:::

:::

## The Future is Composable {.center}

::: {.fragment}
**MCP resolves the critical context gap**
:::

::: {.fragment}
- **Universal language** for AI integration
- **Composable agents** working in concert
- **Network effects** drive rapid ecosystem growth
:::

::: {.fragment}
### Your Next Steps
1. **Identify** a tool you use daily
2. **Build** a simple MCP server for it
3. **Contribute** to the growing ecosystem
4. **Unlock** its potential for all AI applications
:::

::: {.fragment}
**The time to start building is now.**
:::

## Questions & Discussion {.center}

::: {.fragment}
**Thank you!**
:::

::: {.fragment}
### Resources
- **Demo Code**: Available in this repository
- **Documentation**: [modelcontextprotocol.io](https://modelcontextprotocol.io)
- **Community**: [MCP Servers Directory](https://mcpservers.org)
:::

::: {.fragment}
*Let's build the future of AI together.*
:::