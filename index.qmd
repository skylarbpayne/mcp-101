---
title: MCP 101
subtitle: Building the Next Generation of Context-Aware AI Agents
author: Skylar Payne
format: revealjs
---

## The Dawn of Agentic AI {.center}
::: {.fragment}
**From text generation to real-world action**
:::

::: {.fragment}
```{mermaid}
graph TB
    A["🧠 Traditional LLM<br/>Text Generator"] 
    B["🤖 Agentic AI<br/>Action Taker"]
    
    A --> C["📝 Email Drafts"]
    A --> D["💭 Ideas"]
    
    B --> E["🔍 Research"]
    B --> F["⚙️ Tool Use"]
    B --> G["🎯 Goal Achievement"]
    
    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#9f9,stroke:#333,stroke-width:2px
```
:::

::: {.fragment}
**The paradigm shift:**  
Passive content creation → Active problem-solving
:::

## The Context Gap Problem {.center}

::: {.fragment}
**LLMs are "incredibly smart in a vacuum"** 🎈
:::

::: {.columns}

::: {.column width="45%"}
### 🚧 The Challenges

- **⏳ Knowledge Cutoff**: Frozen training data  
- **🏝️ Data Silos**: No access to private/real-time data  
- **🕸️ N×M Integration**: Every model needs custom connections  
:::

::: {.column width="45%" .mb-4}
### 💥 The Impact

- 📉 80% of AI projects fail (RAND Corp, 2024)  
- 🧩 Complex "context engineering" required  
- 🔒 Vendor lock-in and brittle integrations  
:::

:::

## MCP: The USB-C for AI {.center}

| Aspect | Traditional (N×M) | MCP Standard |
|--------|------------------|--------------|
| **Integration Effort** | High: Custom code for each pair | Low: One server, any client |
| **Discoverability** | Manual documentation reading | Automated runtime reflection |
| **Interoperability** | Vendor-locked | Model-agnostic open standard |
| **Security** | Ad-hoc API key management | OAuth 2.1, scopes, consent |
| **Scalability** | Poor: N×M complexity | Excellent: N+M complexity |

## MCP Architecture {.center}

```{mermaid}
graph TD
    A[MCP Host<br/>Claude Desktop, Cursor IDE] --> B[MCP Client 1]
    A --> C[MCP Client 2]
    A --> D[MCP Client N]
    B --> E[ArXiv Server]
    C --> F[GitHub Server]
    D --> G[Database Server]
    
    style A fill:#e1f5fe
    style E fill:#f3e5f5
    style F fill:#f3e5f5
    style G fill:#f3e5f5
```

- **Host**: User-facing application
- **Client**: Manages connections (1:1 with servers)
- **Server**: Exposes specific capabilities via JSON-RPC 2.0

## Our Demo: AI Research Assistant {.center}

::: {.fragment}
**Goal**: Build an agent that finds, analyzes, and manages academic papers
:::

::: {.fragment}
### Implementation Plan
:::

::: {.incremental}
1. **Scaffold**: Basic ArXiv search server
2. **Expand**: Add Tools, Resources, and Prompts
3. **Enhance**: Progress notifications and logging
4. **Secure**: OAuth 2.1 authentication with GitHub
5. **Advanced**: Elicitation, Roots, and Sampling
:::

## Demo Time! {.center}

::: {.fragment}
**Let's see our AI Research Assistant in action**
:::

::: {.fragment}
1. Search for papers on "transformer models"
2. Download a specific paper  
3. Save it to GitHub repository with OAuth 2.1
4. Create research gists with progress tracking
:::

## Step 1: Scaffolding the ArXiv Server

::: {.columns}

::: {.column width="40%"}
### Setup
```bash
uv sync
```
:::

::: {.column width="60%"}
### Simple Server
```python
from mcp.server.fastmcp import FastMCP
import arxiv

mcp = FastMCP("ArXiv Research Server")

@mcp.tool()
def search_papers(query: str, max_results: int = 5):
    """Search ArXiv for scientific papers"""
    pass
```
:::

:::

::: {.fragment}
**Run and test**: `uv run uvicorn server:mcp --reload`
:::

## MCP's Three Core Primitives {.center}

| Primitive | Purpose | Analogy | Example |
|-----------|---------|---------|---------|
| **Tools** | Executable actions with side effects | POST Request | `download_paper(paper_id)` |
| **Resources** | Read-only, file-like data | GET Request | `arxiv/{paper_id}/abstract` |
| **Prompts** | Reusable workflow templates | Workflow | "Deep Paper Analysis" |

::: {.fragment}
**Benefits**: Clear separation of concerns, better security, predictable behavior
:::

## Code Demo: Setup & Models

```python
from mcp.server.fastmcp import FastMCP
import arxiv
from pydantic import BaseModel

mcp = FastMCP("ArXiv Research Server")

class Paper(BaseModel):
    title: str
    authors: list[str]
    summary: str
    pdf_url: str
```

## Code Demo: Tools Implementation

```python
@mcp.tool()
def search_papers(query: str, max_results: int = 5):
    """Search ArXiv for papers"""
    search = arxiv.Search(query=query, 
                         max_results=max_results)
    return [Paper(...) for r in search.results()]
```

## Code Demo: Resources Implementation

```python
@mcp.resource("arxiv/{paper_id}/abstract")
def get_abstract(paper_id: str) -> str:
    """Get paper abstract"""
    paper = arxiv.Search(id_list=[paper_id]).results()[0]
    return paper.summary

@mcp.resource("arxiv/{paper_id}/full_text")  
def get_full_text(paper_id: str) -> str:
    """Get paper full text"""
    # Download and extract text from PDF
    pass
```

::: {.fragment}
**Full implementation**: See `examples/oauth-research-server/server.py`
:::

## Enhanced UX: Progress Tracking

**Problem**: Long-running operations need user feedback

**Solution**: MCP's built-in notification system

```python
@mcp.tool()
def download_papers(paper_ids: list[str], progress_token: str):
    """Download multiple papers with progress tracking"""
    total = len(paper_ids)
    
    for i, paper_id in enumerate(paper_ids):
        # Send progress notification
        mcp.request_context.session.send_progress_notification(
            progress_token=progress_token,
            progress=i + 1,
            total=total,
            message=f"Downloading paper {i + 1} of {total}..."
        )
        
        # Download paper
        download_single_paper(paper_id)
```
## Security: OAuth 2.1 Authentication

::: {.fragment}
**Challenge**: Access GitHub API safely with proper authentication
:::

::: {.columns}

::: {.column width="50%"}
### Traditional OAuth Pain
- Manual app registration
- Copy-paste client credentials
- N×M authentication problem
:::

::: {.column width="50%"}
### MCP Innovation
- **Dynamic Client Registration**
- Automatic endpoint discovery
- One-click user consent
- PKCE security protection
:::

:::

::: {.fragment}
**Result**: Most secure path is also the easiest path
:::

## Authentication Flow

```{mermaid}
sequenceDiagram
    participant User
    participant Client
    participant MCP Server
    participant GitHub
    
    User->>Client: "Save paper to GitHub"
    Client->>MCP Server: save_paper_to_github()
    MCP Server-->>Client: 401 Unauthorized
    
    Note over Client,MCP Server: Client opens browser to MCP login
    Client->>MCP Server: GET /login/github
    MCP Server->>GitHub: redirect to GitHub OAuth
    GitHub->>User: Login & consent screen
    User->>GitHub: Approve access
    GitHub->>MCP Server: callback with auth code
    
    Note over MCP Server: MCP creates internal token bound to GitHub session
    MCP Server->>MCP Server: create internal MCP token
    MCP Server-->>User: success page with token
    
    Note over User,Client: User provides internal token to client
    User->>Client: provide internal MCP token
    Client->>MCP Server: retry with internal token
    MCP Server->>GitHub: API call with stored GitHub token
    GitHub-->>MCP Server: Repository created
    MCP Server->>Client: Success with repo URL!
```

## GitHub Integration Code Example

```python
import httpx
from github_integration import GitHubClient, ResearchPaperRepository

@mcp.tool()
async def save_paper_to_github(paper_id: str, repo_name: str):
    """Save ArXiv paper as GitHub repository with OAuth 2.1"""
    # OAuth protection - triggers auth flow if needed
    auth_header = mcp.request_context.session.get_auth_header()
    if not auth_header:
        raise HTTPException(
            status_code=401,
            headers={"WWW-Authenticate": "Bearer scope=\"repo\""}
        )
    
    # Get paper details from ArXiv
    search = arxiv.Search(id_list=[paper_id])
    paper = next(search.results())
    
    # Create GitHub client with OAuth token
    token = auth_header.replace("Bearer ", "")
    github = GitHubClient(token)
    paper_repo = ResearchPaperRepository(github)
    
    # Create comprehensive repository
    repo = await paper_repo.create_paper_repository(
        paper_title=paper.title,
        paper_id=paper_id,
        authors=[author.name for author in paper.authors],
        abstract=paper.summary,
        pdf_url=paper.pdf_url,
        arxiv_url=paper.entry_id,
        categories=paper.categories,
        published_date=paper.published.strftime('%Y-%m-%d')
    )
    
    return {
        "repository_url": repo.html_url,
        "paper_title": paper.title,
        "paper_id": paper_id
    }
```

## Correct MCP OAuth Implementation

::: {.fragment}
**Following MCP Spec**: MCP server as Resource Server only, delegating auth to GitHub
:::

::: {.columns}

::: {.column width="50%"}
### 🔐 Security Architecture
- **Resource Server Only**: MCP never acts as authorization server
- **GitHub Delegation**: All authentication handled by GitHub
- **Internal Token Binding**: MCP tokens bound to GitHub sessions
- **Session Management**: Proper token lifecycle & expiration
:::

::: {.column width="50%"}
### 🛠️ Implementation Details
- **Login Redirect**: `/login/github` (not OAuth AS endpoint)
- **No OAuth Endpoints**: No `/.well-known`, `/oauth/*` paths
- **Internal Tokens**: JWT tokens signed by MCP server
- **Real API Access**: GitHub repositories & gists via stored tokens
:::

:::

::: {.fragment}
**Demo Files**: `examples/oauth-research-server/server.py` - Simple correct MCP OAuth
:::

## Advanced Interactive Patterns

::: {.columns}

::: {.column width="50%"}
::: {style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;"}
### 🗣️ Elicitation

Ask users for clarification when needed

**Example**: "Which 'transformers'?"  
- AI models or electrical engineering?
:::
:::

::: {.column width="50%"}
::: {style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;"}
### 🔒 Security Features

- **Roots**: Filesystem boundaries  
- **Sampling**: Server can request LLM help  
- **Scopes**: Granular permissions
:::
:::

:::

::: {.fragment}
**Key benefit**: Human-in-the-loop workflows with graceful ambiguity handling
:::

## The Growing MCP Ecosystem

::: {.columns}

::: {.column width="50%"}
### 🛠️ Popular Categories
- **Developer Tools**: GitHub, GitLab, Docker
- **Databases**: PostgreSQL, Redis, Vector DBs  
- **Communication**: Slack, Gmail, Teams
:::

::: {.column width="50%"}
### 🚀 What They Enable
- **Productivity**: Google Drive, Notion, GitHub
- **Web Search**: Brave, DuckDuckGo, Tavily
- **Aggregators**: Zapier (1000s of integrations)
:::

:::

::: {.fragment}
**200+ servers and growing** - Build once, use everywhere
:::

## Getting Started: Developer Resources

::: {.columns}

::: {.column width="50%"}
### Essential Resources
- **Official Docs**: [modelcontextprotocol.io](https://modelcontextprotocol.io)
- **Protocol Spec**: Complete technical specification
- **SDKs**: Python, TypeScript, Java, C#, Go
- **MCP Inspector**: Interactive debugging tool
:::

::: {.column width="50%"}
### Learning & Community
- **DeepLearning.AI Course**: [Build Rich-Context AI Apps](https://www.deeplearning.ai/short-courses/mcp-build-rich-context-ai-apps-with-anthropic/)
- **awesome-mcp-servers**: [GitHub Collection](https://github.com/punkpeye/awesome-mcp-servers)
- **Community**: [MCP Servers Directory](https://mcpservers.org)
- **Quick Start**: Build your first server in minutes
:::

:::

## The Future is Composable {.center}

::: {.fragment}
**MCP resolves the critical context gap**
:::

::: {.fragment}
- **Universal language** for AI integration
- **Composable agents** working in concert
- **Network effects** drive rapid ecosystem growth
:::

::: {.fragment}
### Your Next Steps
1. **Identify** a tool you use daily
2. **Build** a simple MCP server for it
3. **Contribute** to the growing ecosystem
4. **Unlock** its potential for all AI applications
:::

::: {.fragment}
**The time to start building is now.**
:::

## Questions & Discussion {.center}

::: {.fragment}
**Thank you!**
:::

::: {.fragment}
### Resources
- **Demo Code**: Available in this repository
- **Documentation**: [modelcontextprotocol.io](https://modelcontextprotocol.io)
- **Community**: [MCP Servers Directory](https://mcpservers.org)
:::

::: {.fragment}
*Let's build the future of AI together.*
:::